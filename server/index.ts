\nimport express from \'express\';\nimport path from \'path\';\nimport { fileURLToPath } from \'url\';\nimport cors from \'cors\';\nimport apiRoutes from \'./api\';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\n\n// --- Middleware ---\napp.use(cors({\n  origin: \'https://quickserve.appwrite.network\',\n  credentials: true,\n}));\napp.use(express.json());\napp.use(\'/uploads\', express.static(path.join(__dirname, \'uploads\')));\n\n// --- API Routes ---\n// API routes must be registered before the frontend routes.\napp.use(\'/api\', apiRoutes);\n\n\n// --- Client Serving ---\n// In production, the server serves the built client files.\nconst clientDistPath = path.join(__dirname, \'..\/client\');\n\n// Serve static assets from the client build directory.\napp.use(express.static(clientDistPath));\n\n// For any other GET request, send the client\'s index.html file.\n// This is the catch-all for the single-page application.\napp.get(\'*\', (req, res) => {\n  res.sendFile(path.join(clientDistPath, \'index.html\'));\n});\n\n\n// --- Server Start ---\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n